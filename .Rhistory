z <- table(ct)
z
ct <- cutree(pres_cluster, h = 0.2)
z <- table(ct)
z
plan2020 <- plan2020 %>%
mutate(cluster = z)
plan2020 <- plan2020 %>%
mutate(cluster = z)
plan2020 <- plan2020 %>%
mutate(cluster = ct)
z <- as.data.frame(ct)
View(z)
plan2020 <- plan2020 %>%
mutate(cluster = z)
z <- as.data.frame(ct, row.names = "nome")
z <- tibble::rownames_to_column(z, "nome")
View(z)
plan2020 <- plan2020 %>%
mutate(cluster = z)
plan2020 <- plan2020 %>%
inner_join(z, by = c("nome" = "nome"))
write.csv(plan2020, 'teste.csv', row.names = F)
# pres_cluster <- hclust(pres_dist_mat)
pres_cluster <- hclust(pres_dist_mat, method = "single")
# label with document names
pres_cluster$labels <- docnames(dfm)
ct <- cutree(pres_cluster, h = 0.2)
z <- as.data.frame(ct)
z <- tibble::rownames_to_column(z, "nome")
View(z)
pres_dist_mat <- dfm_weight(dfm, scheme = "prop") %>%
textstat_simil(margin = "documents", method = "cosine") %>%
as.dist()
# pres_cluster <- hclust(pres_dist_mat)
pres_cluster <- hclust(pres_dist_mat, method = "single")
# label with document names
pres_cluster$labels <- docnames(dfm)
ct <- cutree(pres_cluster, h = 0.2)
z <- as.data.frame(ct)
z <- tibble::rownames_to_column(z, "nome")
View(z)
# pres_cluster <- hclust(pres_dist_mat)
pres_cluster <- hclust(pres_dist_mat, method = "complete")
# label with document names
pres_cluster$labels <- docnames(dfm)
ct <- cutree(pres_cluster, h = 0.2)
z <- as.data.frame(ct)
z <- tibble::rownames_to_column(z, "nome")
View(z)
# pres_cluster <- hclust(pres_dist_mat)
pres_cluster <- hclust(pres_dist_mat, method = "average")
# label with document names
pres_cluster$labels <- docnames(dfm)
ct <- cutree(pres_cluster, h = 0.2)
z <- as.data.frame(ct)
z <- tibble::rownames_to_column(z, "nome")
View(z)
# pres_cluster <- hclust(pres_dist_mat)
pres_cluster <- hclust(pres_dist_mat, method = "ward.D")
# label with document names
pres_cluster$labels <- docnames(dfm)
ct <- cutree(pres_cluster, h = 0.2)
z <- as.data.frame(ct)
z <- tibble::rownames_to_column(z, "nome")
View(z)
pres_dist_mat <- dfm_weight(dfm, scheme = "prop") %>%
textstat_simil(margin = "documents", method = "cosine", min_simil = 0.9) %>%
as.dist()
pres_cluster <- hclust(pres_dist_mat)
# label with document names
pres_cluster$labels <- docnames(dfm)
ct <- cutree(pres_cluster, h = 0.1)
z <- as.data.frame(ct)
z <- tibble::rownames_to_column(z, "nome")
View(z)
pres_dist_mat <- dfm_weight(dfm, scheme = "prop") %>%
textstat_simil(margin = "documents", method = "cosine", min_simil = 0.9) %>%
as.dist()
pres_cluster <- hclust(pres_dist_mat)
# label with document names
pres_cluster$labels <- docnames(dfm)
plot(pres_cluster, xlab = "", sub = "",
main = "Euclidean Distance on Normalized Token Frequency")
ct <- cutree(pres_cluster, h = 0.5)
z <- as.data.frame(ct)
z <- tibble::rownames_to_column(z, "nome")
View(z)
ct <- cutree(pres_cluster, h = 0.1)
z <- as.data.frame(ct)
z <- tibble::rownames_to_column(z, "nome")
View(z)
ct <- cutree(pres_cluster, h = 0.9)
z <- as.data.frame(ct)
z <- tibble::rownames_to_column(z, "nome")
View(z)
library(tidyverse)
library(readtext)
library(quanteda)
library(data.table)
library(topicmodels)
library(tidytext)
library(viridis)
stop <- c("poder", "cf", "moreira", "alves", "tribunal", "infraestrutura", "dje", "l", "uma", "um", "muito", "há", "temos", "dizer",
"essa", "me", "nós", "eu", "essa", "esta", "muito", "ó", "quando", "quanto", "rtj",
"mas", "foi", "ao", "par", "se", "88", "crfb", "c.f", "os", "que", "não", "b", "c",
"britto", "ilmar", "gallotti", "galvão", "silveira", "sydney", "néri", "dr", "cezar",
"velloso","lewandowski", "ministra", "senhora", "paulo", "5º", "iii", "janeiro",
"celso", "mello", "iv", "r", "outro", "voto", "luiz", "roberto", "mendes", "p", "4º", "dj",
"vossa", "excelência", "legislativa", "adin", "quanto", "fls", "rio", "sr", "stf",
"sepúlveda", "peluso", "carlos", "pertence", "dias", "artigo", "aqui", "então",
"constitucional", "estado", "brasileira", "estadual", "públicas", "direito",
"direitos", "df", "federal", "lei", "adi", "constituição", "supremo", "
tribunal", "3º", "apenas", "pedido", "institui", "ministro", "senhor",
"caso", "rel", "aurélio", "qualquer", "ainda", "medida", "assim", "sobre",
"assim", "2º", "ii", "i", "1º", "mp", "sob", "porque", "teor", "nº", "conforme",
"inteiro", "gilmar", "moraes", "alexandre", "rosa", "lúcia", "cármen", "fachin",
"toffoli", "barroso", "pode", "fux", "página", "senha", "código", "2.200-2",
"chaves", "eletrônico", "endereço", "acessado", "documento", "REQTE", "ADV",
"DOS", "DO", "A", "MIN", "DA", "DAS", "INTDO", "Acórdão", "RELATORA","PLENÁRIO",
"RELATOR","INCONSTITUCIONALIDADE","DIRETA", "AÇÃO", "DE","EMENTA", "é", "e", "ser",
"assinado", "digitalmente", "art", "número", "n", "s", "v", "icp-brasil")
plan2020 <- read_csv("~/R Projects/stf_text_mining/planilha2020_processada.csv")
plan2020_text <- readtext("~/R Projects/stf_text_mining/planilha2020_processada_bytopic.csv", text_field = "acordao")  # Indicates the column with the full extent of the judicial opinion as the text field.
corpus <- corpus(plan2020_text)
docnames(corpus) <- plan2020_text$nome
tokens <- tokens(corpus, remove_punct = T, remove_symbols = T, remove_url = T, remove_numbers = T)
tokens <- tokens_remove(tokens, stopwords("portuguese"))  # Removes common portuguese stopwords.
tokens <- tokens_remove(tokens, pattern = stop)  # Removes our custom, domain-specific, stopwords, as defined above.
dfm <- dfm(tokens, tolower = T, remove = stop, case_insensitive = T)
install.packages('textmineR')
library(textmineR)
dtm <- convert(dfm, to = "tm")
tf_mat <- TermDocFreq(dtm)
dtm <- convert(dfm, to = "stm")
tf_mat <- TermDocFreq(dtm)
dtm <- convert(dfm, to = "topicmodels")
tf_mat <- TermDocFreq(dtm)
dtm <- CreateDtm(doc_vec = plan2020$acordao, # character vector of documents
doc_names = plan2020$nome, # document names
ngram_window = c(1, 2), # minimum and maximum n-gram length
stopword_vec = c(stopwords::stopwords("pt"), # stopwords from tm
stopwords::stopwords(source = stop)), # this is the default value
lower = TRUE, # lowercase - this is the default value
remove_punctuation = TRUE, # punctuation - this is the default
remove_numbers = TRUE, # numbers - this is the default
verbose = FALSE, # Turn off status bar for this demo
cpus = 2) # default is all available cpus on the system
dtm <- CreateDtm(doc_vec = plan2020$acordao, # character vector of documents
doc_names = plan2020$nome, # document names
ngram_window = c(1, 2), # minimum and maximum n-gram length
stopword_vec = c(stopwords::stopwords("pt"), stop), # this is the default value
lower = TRUE, # lowercase - this is the default value
remove_punctuation = TRUE, # punctuation - this is the default
remove_numbers = TRUE, # numbers - this is the default
verbose = T, # Turn off status bar for this demo
) # default is all available cpus on the system
tf_mat <- TermDocFreq(dtm)
tfidf <- t(dtm[ , tf_mat$term ]) * tf_mat$idf
tfidf <- t(tfidf)
csim <- tfidf / sqrt(rowSums(tfidf * tfidf))
csim <- csim %*% t(csim)
cdist <- as.dist(1 - csim)
hc <- hclust(cdist, "ward.D")
clustering <- cutree(hc, 10)
plot(hc, main = "Hierarchical clustering of 100 NIH grant abstracts",
ylab = "", xlab = "", yaxt = "n")
rect.hclust(hc, 10, border = "red")
clustering <- cutree(hc, h = 0.2)
rect.hclust(hc, h = 0.2, border = "red")
plot(hc, main = "Hierarchical clustering of 100 NIH grant abstracts",
ylab = "", xlab = "", yaxt = "n")
rect.hclust(hc, h = 0.2, border = "red")
z <- as.data.frame(clustering)
z <- tibble::rownames_to_column(z, "nome")
View(z)
plan2020 <- plan2020 %>%
inner_join(z, by = c("nome" = "nome"))
write.csv(plan2020, 'teste.csv', row.names = F)
plot(hc, main = "Clusters de ADIs",
ylab = "", xlab = "", yaxt = "n")
clustering_B <- cutree(hc, h = 0.3)
clustering_B <- cutree(hc, h = 0.3)
d <- as.data.frame(clustering_B)
d <- tibble::rownames_to_column(d, "nome")
View(d)
plan2020 <- read_csv("~/R Projects/stf_text_mining/planilha2020_processada.csv")
plan2020 <- plan2020 %>%
inner_join(d, by = c("nome" = "nome"))
write.csv(plan2020, 'teste0.3.csv', row.names = F)
clustering <- cutree(hc, h = 0.4)
z <- as.data.frame(clustering)
z <- tibble::rownames_to_column(z, "nome")
plan2020 <- read_csv("~/R Projects/stf_text_mining/planilha2020_processada.csv")
plan2020 <- plan2020 %>%
inner_join(z, by = c("nome" = "nome"))
write.csv(plan2020, 'teste0.4.csv', row.names = F)
abline(h= 0.3,col = 'blue')
abline(h= 1,col = 'red')
abline(h= 2,col = 'red')
abline(h= 2,col = 'green')
abline(h= 0,col = 'orange')
abline(h= -1,col = 'orange')
plot(hc, main = "Clusters de ADIs",
ylab = "", xlab = "", yaxt = "n")
abline(h= 0,col = 'orange')
abline(h= 1,col = 'red')
abline(h= 0.3,col = 'blue')
abline(h= 2,col = 'green')
abline(h= 0.4,col = 'purple')
plot(hc, main = "Clusters de ADIs",
ylab = "8", xlab = "", yaxt = "n")
plot(hc, main = "Clusters de ADIs",
ylab = "h", xlab = "", yaxt = "n", cex = 0)
plot(hc, main = "Clusters de ADIs",
ylab = "h", xlab = "", yaxt = "n", csi = 0)
plot(hc, main = "Clusters de ADIs",
ylab = "h", xlab = "", yaxt = "n", xaxt = "n")
plot(hc, main = "Clusters de ADIs",
ylab = "h", xlab = "", yaxt = "n")
plot(hc, main = "Clusters de ADIs",
ylab = "h", xlab = "", yaxt = "n", tck = -2)
plot(hc, main = "Clusters de ADIs",
ylab = "h", xlab = "", yaxt = "n", tck = -8)
plot(hc, main = "Clusters de ADIs",
ylab = "h", xlab = "", yaxt = "n", tck = 1)
plot(hc, main = "Clusters de ADIs",
ylab = "h", xlab = "", yaxt = "n", lab = 0)
plot(hc, main = "Clusters de ADIs",
ylab = "h", xlab = "", yaxt = "n", leaflab = "none")
# Define nodePar
nodePar <- list(lab.cex = 0.6, pch = c(NA, 19),
cex = 0.7, col = "blue")
# Customized plot; remove labels
plot(hc, ylab = "Height", nodePar = nodePar, leaflab = "none")
plot(hc, main = "Clusters de ADIs",
ylab = "h", xlab = "")
plot(hc, main = "Clusters de ADIs",
ylab = "h", xlab = "", xaxt = "n")
plot(hc, main = "Clusters de ADIs",
ylab = "h", xlab = "", ylim = c(0,20))
plot(hc, main = "Clusters de ADIs",
ylab = "h", xlab = "", labels=FALSE)
abline(h= 0.3,col = 'blue')
abline(h= 1,col = 'red')
View(z)
teste <- as.data.frame(cdist)
abline(h= 10,col = 'green')
rect.hclust(hc, h = 10, border = "green")
plot(hc, main = "Clusters de ADIs",
ylab = "h", xlab = "", labels=FALSE)
abline(h= 0.3,col = 'blue')
abline(h= 1,col = 'red')
abline(h= 10,col = 'green')
abline(h= 15,col = 'orange')
rect.hclust(hc, h = 15, border = "orange")
plot(hc, main = "Clusters de ADIs",
ylab = "h", xlab = "", labels=FALSE)
abline(h= 0.3,col = 'blue')
abline(h= 1,col = 'red')
abline(h= 10,col = 'green')
abline(h= 16,col = 'orange')
rect.hclust(hc, h = 16, border = "orange")
plot(hc, main = "Clusters de ADIs",
ylab = "h", xlab = "", labels=FALSE)
abline(h= 0.3,col = 'blue')
abline(h= 1,col = 'red')
abline(h= 10,col = 'green')
abline(h= 15.2,col = 'orange')
rect.hclust(hc, h = 15.2, border = "orange")
plot(hc, main = "Clusters de ADIs",
ylab = "h", xlab = "", yaxt = "n")
plot(hc, main = "Clusters de ADIs",
ylab = "h", xlab = "", labels=FALSE)
abline(h= 0.3,col = 'blue')
abline(h= 1,col = 'red')
abline(h= 10,col = 'green')
clustering <- cutree(hc, 32)
z <- as.data.frame(clustering)
z <- tibble::rownames_to_column(z, "nome")
View(z)
plan2020 <- read_csv("~/R Projects/stf_text_mining/planilha2020_processada.csv")
plan2020 <- plan2020 %>%
inner_join(z, by = c("nome" = "nome"))
write.csv(plan2020, 'teste32.csv', row.names = F)
cluster_words <- lapply(unique(clustering), function(x){
rows <- dtm[ clustering == x , ]
# for memory's sake, drop all words that don't appear in the cluster
rows <- rows[ , colSums(rows) > 0 ]
colSums(rows) / sum(rows) - p_words[ colnames(rows) ]
})
p_words <- colSums(dtm) / sum(dtm)
cluster_words <- lapply(unique(clustering), function(x){
rows <- dtm[ clustering == x , ]
# for memory's sake, drop all words that don't appear in the cluster
rows <- rows[ , colSums(rows) > 0 ]
colSums(rows) / sum(rows) - p_words[ colnames(rows) ]
})
cluster_summary <- data.frame(cluster = unique(clustering),
size = as.numeric(table(clustering)),
top_words = sapply(cluster_words, function(d){
paste(
names(d)[ order(d, decreasing = TRUE) ][ 1:10 ],
collapse = ", ")
}),
stringsAsFactors = FALSE)
View(cluster_summary)
write.csv(cluster_summary, "clusters.csv", row.names = F)
clustering <- cutree(hc, 128)
z <- as.data.frame(clustering)
z <- tibble::rownames_to_column(z, "nome")
cluster_words <- lapply(unique(clustering), function(x){
rows <- dtm[ clustering == x , ]
# for memory's sake, drop all words that don't appear in the cluster
rows <- rows[ , colSums(rows) > 0 ]
colSums(rows) / sum(rows) - p_words[ colnames(rows) ]
})
cluster_summary <- data.frame(cluster = unique(clustering),
size = as.numeric(table(clustering)),
top_words = sapply(cluster_words, function(d){
paste(
names(d)[ order(d, decreasing = TRUE) ][ 1:10 ],
collapse = ", ")
}),
stringsAsFactors = FALSE)
write.csv(cluster_summary, "clusters.csv", row.names = F)
stop <- c("poder", "cf", "moreira", "alves", "tribunal", "infraestrutura", "dje", "l", "uma", "um", "muito", "há", "temos", "dizer",
"essa", "me", "nós", "eu", "essa", "esta", "muito", "ó", "quando", "quanto", "rtj",
"mas", "foi", "ao", "par", "se", "88", "crfb", "c.f", "os", "que", "não", "b", "c",
"britto", "ilmar", "gallotti", "galvão", "silveira", "sydney", "néri", "dr", "cezar",
"velloso","lewandowski", "ministra", "senhora", "paulo", "5º", "iii", "janeiro",
"celso", "mello", "iv", "r", "outro", "voto", "luiz", "roberto", "mendes", "p", "4º", "dj",
"vossa", "excelência", "legislativa", "adin", "quanto", "fls", "rio", "sr", "stf",
"sepúlveda", "peluso", "carlos", "pertence", "dias", "artigo", "aqui", "então",
"constitucional", "estado", "brasileira", "estadual", "públicas", "direito",
"direitos", "df", "federal", "lei", "adi", "constituição", "supremo", "
tribunal", "3º", "apenas", "pedido", "institui", "ministro", "senhor",
"caso", "rel", "aurélio", "qualquer", "ainda", "medida", "assim", "sobre",
"assim", "2º", "ii", "i", "1º", "mp", "sob", "porque", "teor", "nº", "conforme",
"inteiro", "gilmar", "moraes", "alexandre", "rosa", "lúcia", "cármen", "fachin",
"toffoli", "barroso", "pode", "fux", "página", "senha", "código", "2.200-2",
"chaves", "eletrônico", "endereço", "acessado", "documento", "REQTE", "ADV",
"DOS", "DO", "A", "MIN", "DA", "DAS", "INTDO", "Acórdão", "RELATORA","PLENÁRIO",
"RELATOR","INCONSTITUCIONALIDADE","DIRETA", "AÇÃO", "DE","EMENTA", "é", "e", "ser",
"assinado", "digitalmente", "art", "número", "n", "s", "v", "icp-brasil", "portal", "portal_autenticacao", "www_jus",
"autenticacao", "br_portal", "www", "http_www", "ministério_público", "jus_br",
"autenticacao_autenticardocumento", "autenticardocumento", "autenticacao_autenticardocumento,
autenticardocumento", "autenticardocumento_asp", "net", "hdl", "https", "net_https", "https_hdl",
"santa", "catarina", "santa_catarina", "sc", "paraíba", "ceará", "rondônia", "amapá", "mato", "grosso", "mt", "mato_grosso")
plan2020 <- read_csv("~/R Projects/stf_text_mining/planilha2020_processada.csv")
dtm <- CreateDtm(doc_vec = plan2020$acordao, # character vector of documents
doc_names = plan2020$nome, # document names
ngram_window = c(1, 2), # minimum and maximum n-gram length
stopword_vec = c(stopwords::stopwords("pt"), stop), # this is the default value
lower = TRUE, # lowercase - this is the default value
remove_punctuation = TRUE, # punctuation - this is the default
remove_numbers = TRUE, # numbers - this is the default
verbose = T, # Turn off status bar for this demo
) # default is all available cpus on the system
tf_mat <- TermDocFreq(dtm)
tfidf <- t(dtm[ , tf_mat$term ]) * tf_mat$idf
tfidf <- t(tfidf)
csim <- tfidf / sqrt(rowSums(tfidf * tfidf))
csim <- csim %*% t(csim)
cdist <- as.dist(1 - csim)
hc <- hclust(cdist, "ward.D")
clustering <- cutree(hc, 128)
p_words <- colSums(dtm) / sum(dtm)
cluster_words <- lapply(unique(clustering), function(x){
rows <- dtm[ clustering == x , ]
# for memory's sake, drop all words that don't appear in the cluster
rows <- rows[ , colSums(rows) > 0 ]
colSums(rows) / sum(rows) - p_words[ colnames(rows) ]
})
cluster_summary <- data.frame(cluster = unique(clustering),
size = as.numeric(table(clustering)),
top_words = sapply(cluster_words, function(d){
paste(
names(d)[ order(d, decreasing = TRUE) ][ 1:10 ],
collapse = ", ")
}),
stringsAsFactors = FALSE)
write.csv(cluster_summary, "clusters.csv", row.names = F)
clustering_B <- cutree(hc, h = 32)
plot(hc, main = "Clusters de ADIs",
ylab = "h", xlab = "", labels=FALSE)
rect.hclust(hc, 32, border = "orange")
stop <- c("poder", "cf", "moreira", "alves", "tribunal", "infraestrutura", "dje", "l", "uma", "um", "muito", "há", "temos", "dizer",
"essa", "me", "nós", "eu", "essa", "esta", "muito", "ó", "quando", "quanto", "rtj",
"mas", "foi", "ao", "par", "se", "88", "crfb", "c.f", "os", "que", "não", "b", "c",
"britto", "ilmar", "gallotti", "galvão", "silveira", "sydney", "néri", "dr", "cezar",
"velloso","lewandowski", "ministra", "senhora", "paulo", "5º", "iii", "janeiro",
"celso", "mello", "iv", "r", "outro", "voto", "luiz", "roberto", "mendes", "p", "4º", "dj",
"vossa", "excelência", "legislativa", "adin", "quanto", "fls", "rio", "sr", "stf",
"sepúlveda", "peluso", "carlos", "pertence", "dias", "artigo", "aqui", "então",
"constitucional", "estado", "brasileira", "estadual", "públicas", "direito",
"direitos", "df", "federal", "lei", "adi", "constituição", "supremo", "
tribunal", "3º", "apenas", "pedido", "institui", "ministro", "senhor",
"caso", "rel", "aurélio", "qualquer", "ainda", "medida", "assim", "sobre",
"assim", "2º", "ii", "i", "1º", "mp", "sob", "porque", "teor", "nº", "conforme",
"inteiro", "gilmar", "moraes", "alexandre", "rosa", "lúcia", "cármen", "fachin",
"toffoli", "barroso", "pode", "fux", "página", "senha", "código", "2.200-2",
"chaves", "eletrônico", "endereço", "acessado", "documento", "REQTE", "ADV",
"DOS", "DO", "A", "MIN", "DA", "DAS", "INTDO", "Acórdão", "RELATORA","PLENÁRIO",
"RELATOR","INCONSTITUCIONALIDADE","DIRETA", "AÇÃO", "DE","EMENTA", "é", "e", "ser",
"assinado", "digitalmente", "art", "número", "n", "s", "v", "icp-brasil", "portal", "portal_autenticacao", "www_jus",
"autenticacao", "br_portal", "www", "http_www", "ministério_público", "jus_br",
"autenticacao_autenticardocumento", "autenticardocumento", "autenticacao_autenticardocumento,
autenticardocumento", "autenticardocumento_asp", "net", "hdl", "https", "net_https", "https_hdl",
"santa", "catarina", "santa_catarina", "sc", "paraíba", "ceará", "rondônia", "amapá", "mato", "grosso",
"mt", "mato_grosso", "handle_handle", "re_re", "norte", "grande_norte", "grande" , "rn",
"santo", "espírito", "espírito_santo", "es", "minas", "minas_gerais", "gerais", "mg", "sul", "grande_sul",
"rs", "tocantins", "amazonas")
tf_mat <- TermDocFreq(dtm)
tfidf <- t(dtm[ , tf_mat$term ]) * tf_mat$idf
tfidf <- t(tfidf)
csim <- tfidf / sqrt(rowSums(tfidf * tfidf))
csim <- csim %*% t(csim)
cdist <- as.dist(1 - csim)
hc <- hclust(cdist, "ward.D")
clustering <- cutree(hc, 128)
p_words <- colSums(dtm) / sum(dtm)
cluster_words <- lapply(unique(clustering), function(x){
rows <- dtm[ clustering == x , ]
# for memory's sake, drop all words that don't appear in the cluster
rows <- rows[ , colSums(rows) > 0 ]
colSums(rows) / sum(rows) - p_words[ colnames(rows) ]
})
cluster_summary <- data.frame(cluster = unique(clustering),
size = as.numeric(table(clustering)),
top_words = sapply(cluster_words, function(d){
paste(
names(d)[ order(d, decreasing = TRUE) ][ 1:10 ],
collapse = ", ")
}),
stringsAsFactors = FALSE)
write.csv(cluster_summary, "clusters128.csv", row.names = F)
View(hc)
plot(hc, main = "Clusters de ADIs",
ylab = "h", xlab = "", yaxt = "n")
rect.hclust(hc, 128, border = "purple")
plot(hc, main = "Clusters de ADIs",
ylab = "h", xlab = "", labels=FALSE)
rect.hclust(hc, 128, border = "purple")
stop <- c("poder", "cf", "moreira", "alves", "tribunal", "infraestrutura", "dje", "l", "uma", "um", "muito", "há", "temos", "dizer",
"essa", "me", "nós", "eu", "essa", "esta", "muito", "ó", "quando", "quanto", "rtj",
"mas", "foi", "ao", "par", "se", "88", "crfb", "c.f", "os", "que", "não", "b", "c",
"britto", "ilmar", "gallotti", "galvão", "silveira", "sydney", "néri", "dr", "cezar",
"velloso","lewandowski", "ministra", "senhora", "paulo", "5º", "iii", "janeiro",
"celso", "mello", "iv", "r", "outro", "voto", "luiz", "roberto", "mendes", "p", "4º", "dj",
"vossa", "excelência", "legislativa", "adin", "quanto", "fls", "rio", "sr", "stf",
"sepúlveda", "peluso", "carlos", "pertence", "dias", "artigo", "aqui", "então",
"constitucional", "estado", "brasileira", "estadual", "públicas", "direito",
"direitos", "df", "federal", "lei", "adi", "constituição", "supremo", "
tribunal", "3º", "apenas", "pedido", "institui", "ministro", "senhor",
"caso", "rel", "aurélio", "qualquer", "ainda", "medida", "assim", "sobre",
"assim", "2º", "ii", "i", "1º", "mp", "sob", "porque", "teor", "nº", "conforme",
"inteiro", "gilmar", "moraes", "alexandre", "rosa", "lúcia", "cármen", "fachin",
"toffoli", "barroso", "pode", "fux", "página", "senha", "código", "2.200-2",
"chaves", "eletrônico", "endereço", "acessado", "documento", "REQTE", "ADV",
"DOS", "DO", "A", "MIN", "DA", "DAS", "INTDO", "Acórdão", "RELATORA","PLENÁRIO",
"RELATOR","INCONSTITUCIONALIDADE","DIRETA", "AÇÃO", "DE","EMENTA", "é", "e", "ser",
"assinado", "digitalmente", "art", "número", "n", "s", "v", "icp-brasil", "portal", "portal_autenticacao", "www_jus",
"autenticacao", "br_portal", "www", "http_www", "ministério_público", "jus_br",
"autenticacao_autenticardocumento", "autenticardocumento", "autenticacao_autenticardocumento,
autenticardocumento", "autenticardocumento_asp", "net", "hdl", "https", "net_https", "https_hdl",
"santa", "catarina", "santa_catarina", "sc", "paraíba", "ceará", "rondônia", "amapá", "mato", "grosso",
"mt", "mato_grosso", "handle_handle", "re_re", "norte", "grande_norte", "grande" , "rn",
"santo", "espírito", "espírito_santo", "es", "minas", "minas_gerais", "gerais", "mg", "sul", "grande_sul",
"rs", "tocantins", "amazonas")
dtm <- CreateDtm(doc_vec = plan2020$acordao, # character vector of documents
doc_names = plan2020$nome, # document names
ngram_window = c(1, 2), # minimum and maximum n-gram length
stopword_vec = c(stopwords::stopwords("pt"), stop), # this is the default value
lower = TRUE, # lowercase - this is the default value
remove_punctuation = TRUE, # punctuation - this is the default
remove_numbers = TRUE, # numbers - this is the default
verbose = T, # Turn off status bar for this demo
) # default is all available cpus on the system
tf_mat <- TermDocFreq(dtm)
tfidf <- t(dtm[ , tf_mat$term ]) * tf_mat$idf
tfidf <- t(tfidf)
csim <- tfidf / sqrt(rowSums(tfidf * tfidf))
csim <- csim %*% t(csim)
cdist <- as.dist(1 - csim)
hc <- hclust(cdist, "ward.D")
clustering <- cutree(hc, 128)
plot(hc, main = "Clusters de ADIs",
ylab = "h", xlab = "", labels=FALSE)
rect.hclust(hc, 128, border = "purple")
p_words <- colSums(dtm) / sum(dtm)
cluster_words <- lapply(unique(clustering), function(x){
rows <- dtm[ clustering == x , ]
# for memory's sake, drop all words that don't appear in the cluster
rows <- rows[ , colSums(rows) > 0 ]
colSums(rows) / sum(rows) - p_words[ colnames(rows) ]
})
cluster_summary <- data.frame(cluster = unique(clustering),
size = as.numeric(table(clustering)),
top_words = sapply(cluster_words, function(d){
paste(
names(d)[ order(d, decreasing = TRUE) ][ 1:10 ],
collapse = ", ")
}),
stringsAsFactors = FALSE)
write.csv(cluster_summary, "clusters128.csv", row.names = F)
plot(hc, main = "Clusters de ADIs",
ylab = "h", xlab = "", labels=FALSE)
rect.hclust(hc, 128, border = "red")
plan2020 <- read_csv("~/R Projects/stf_text_mining/planilha2020_processada_bytopic.csv")
plan2020 <- plan2020 %>% select(-main_topic)
write.csv(plan2020, "planilha2020_processada.csv", row.names = F)
